// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UsuarioInterno {
  idUsuario   String      @id @default(uuid())
  nombre      String
  correo      String      @unique
  contraseña String
  activo      Boolean     @default(true)
  idRol       String
  rol         Rol         @relation(fields: [idRol], references: [idRol])
  actividades Actividad[]

  @@map("usuarios_internos")
}

model Rol {
  idRol       String           @id @default(uuid())
  nombre      String           @unique
  descripcion String?
  usuarios    UsuarioInterno[]
  permisos    RolPermiso[]

  @@map("roles")
}

model Permiso {
  idPermiso String       @id @default(uuid())
  modulo    String
  accion    String
  roles     RolPermiso[]

  @@unique([modulo, accion])
  @@map("permisos")
}

model RolPermiso {
  idRol     String
  idPermiso String

  rol     Rol     @relation(fields: [idRol], references: [idRol])
  permiso Permiso @relation(fields: [idPermiso], references: [idPermiso])

  @@id([idRol, idPermiso])
  @@map("rol_permiso")
}

model ClienteEmpresa {
  idCliente   String  @id @default(uuid())
  razonSocial String
  rubro       String
  correo      String
  telefono    String
  direccion   String
  activo      Boolean @default(true)

  contactos   ContactoCliente[]
  etiquetas   ClienteEtiqueta[]
  actividades Actividad[]
  proyectos   Proyecto[]

  @@map("cliente_empresa")
}

model ContactoCliente {
  idContacto String  @id @default(uuid())
  nombre     String
  cargo      String
  email      String
  telefono   String
  activo     Boolean @default(true)

  idCliente     String
  cliente       ClienteEmpresa       @relation(fields: [idCliente], references: [idCliente])
  interacciones InteraccionCliente[]

  @@map("contacto_cliente")
}

model EtiquetaCliente {
  idEtiqueta String            @id @default(uuid())
  nombre     String            @unique
  clientes   ClienteEtiqueta[]

  @@map("etiqueta_cliente")
}

model ClienteEtiqueta {
  idCliente  String
  idEtiqueta String

  cliente  ClienteEmpresa  @relation(fields: [idCliente], references: [idCliente])
  etiqueta EtiquetaCliente @relation(fields: [idEtiqueta], references: [idEtiqueta])

  @@id([idCliente, idEtiqueta])
  @@map("cliente_etiqueta")
}

model InteraccionCliente {
  idInteraccion String   @id @default(uuid())
  fecha         DateTime @default(now())
  tipo          String // llamada, correo, reunión, etc.
  descripcion   String

  idContacto String
  contacto   ContactoCliente @relation(fields: [idContacto], references: [idContacto])

  @@map("interaccion_cliente")
}

model Actividad {
  idActividad String   @id @default(uuid())
  fecha       DateTime @default(now())
  tipo        String // creación, edición, interacción, etc.
  descripcion String

  idUsuario String
  usuario   UsuarioInterno @relation(fields: [idUsuario], references: [idUsuario])

  idCliente String
  cliente   ClienteEmpresa @relation(fields: [idCliente], references: [idCliente])

  idProyecto String?
  proyecto   Proyecto? @relation(fields: [idProyecto], references: [idProyecto])

  @@map("actividad")
}

model Proyecto {
  idProyecto       String           @id @default(uuid())
  nombre           String
  descripcion      String?
  estado           EstadoProyecto   @default(PLANEADO)
  fechaInicio      DateTime
  fechaFin         DateTime?
  activo           Boolean          @default(true)
  
  idCliente        String
  cliente          ClienteEmpresa   @relation(fields: [idCliente], references: [idCliente])             

  notas            NotaProyecto[]
  actividades      Actividad[]
  // tareas         Tarea[]
  // archivos       Archivo[]

  creadoEn         DateTime         @default(now())
  actualizadoEn    DateTime         @updatedAt
  
  @@map("proyecto")
}

model NotaProyecto {
  idNota      String   @id @default(uuid())
  contenido   String
  fecha       DateTime @default(now())

  idProyecto  String
  proyecto    Proyecto @relation(fields: [idProyecto], references: [idProyecto])

  @@map("nota_proyecto")
}

enum EstadoProyecto {
  PLANEADO
  EN_PROGRESO
  FINALIZADO
}
